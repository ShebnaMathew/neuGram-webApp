{"ast":null,"code":"var _jsxFileName = \"/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/bobby_lupo_lisa_lam_miranda_tran_shebna_mathew_finalproject/src/components/Form.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { sendToChat } from \"../redux/actions\";\nimport ToxicityOutput from \"./ToxicityOutput\";\nimport * as toxicity from '@tensorflow-models/toxicity';\nimport { Tooltip } from \"bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst THRESHOLD = 0.3;\nlet model;\ntoxicity.load(THRESHOLD).then(toxicityModel => model = toxicityModel);\n\nconst Form = () => {\n  _s();\n\n  const [messageTxt, setMessageTxt] = useState(\"\");\n  const [checkInProgress, setCheckInProgress] = useState(false);\n  const [isToxic, setIsToxic] = useState(false);\n  const [toxicityValue, setToxicityValue] = useState(0);\n  const [tooltipOpen, toggleTooltip] = useState(false);\n  const tooltipRef = useRef();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    let tooltip = tooltipRef.current; // Get the DOM element using the ref\n\n    let bsTooltip = Tooltip.getInstance(tooltip); // Get an instance of Bootstrap's Tooltip plugin\n\n    if (!bsTooltip) {\n      // Initializes the tooltip when the page first loads\n      bsTooltip = new Tooltip(tooltip);\n    } else {\n      // Shows or hides the tooltip as appropriate\n      tooltipOpen ? bsTooltip.show() : bsTooltip.hide();\n    }\n  });\n\n  const processMessage = () => {\n    if (!isToxic) {\n      setCheckInProgress(true);\n      model.classify(messageTxt).then(predictions => {\n        let problems = {};\n\n        for (let pred of predictions) {\n          if (pred.results[0].match) {\n            problems[pred.label] = pred.results[0].probabilities[1]; // Gets the true probability\n          }\n        }\n\n        if (Object.keys(problems).length === 0) // Not toxic\n          sendMessageAndClearForm();else {\n          setCheckInProgress(false);\n          setIsToxic(true);\n          setToxicityValue(calculateToxicity(problems));\n        }\n      });\n    } else sendMessageAndClearForm();\n  };\n\n  const onKeyUp = event => {\n    if (event.keyCode === 13) processMessage();\n  };\n\n  const sendMessageAndClearForm = () => {\n    dispatch(sendToChat(messageTxt));\n    setMessageTxt(\"\");\n    setIsToxic(false);\n    setCheckInProgress(false);\n  };\n\n  const processInput = event => {\n    setMessageTxt(event.target.value);\n\n    if (isToxic) {\n      setIsToxic(false);\n    }\n  };\n\n  const calculateToxicity = problems => {\n    //  Get the highest toxicity value\n    const probablities = Object.values(problems);\n    const max = Math.max(...probablities);\n    console.log(max * 100);\n    return max * 100;\n  };\n\n  const getButtonText = () => {\n    if (checkInProgress) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Checking \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 59\n        }, this)]\n      }, void 0, true);\n    } else {\n      if (isToxic) return \"Send anyway\";else return \"Check and send\";\n    }\n  };\n\n  const getToxicityFeedback = () => {\n    // Some arbitrary thresholds... \n    const PROBABLY_TOXIC = 0.7;\n    if (toxicityValue < PROBABLY_TOXIC) return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Your message \", /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"might\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 35\n      }, this), \" be toxic but I'm not sure...\"]\n    }, void 0, true);else return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Your message is probably toxic!\"\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => e.preventDefault(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          \"aria-label\": \"Your message\",\n          type: \"text\",\n          className: \"form-control\",\n          id: \"messageTxt\",\n          placeholder: \"Enter your message\",\n          value: messageTxt,\n          invalid: `${isToxic}`,\n          disabled: checkInProgress,\n          onChange: processInput,\n          onKeyUp: onKeyUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary float-right\",\n          onClick: processMessage,\n          disabled: checkInProgress,\n          children: getButtonText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-feedback\",\n        style: isToxic === true ? {\n          display: \"block\"\n        } : {\n          display: \"none\"\n        },\n        children: [getToxicityFeedback(), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-link\",\n            id: \"toxicity-help\",\n            ref: tooltipRef,\n            \"data-bs-toggle\": \"tooltip\",\n            \"data-bs-placement\": \"top\",\n            \"data-bs-trigger\": \"manual\",\n            title: \"A message is considered to be toxic if it is hateful,  explicit, or otherwise offensive.  We calculate the  probability that your message is toxic by comparing  it to millions of internet comments that have been  labeled as either toxic or healthy. The darker and wider the bar below, the higher the  probability that your message is toxic.\",\n            onPointerEnter: () => toggleTooltip(true),\n            onFocus: () => toggleTooltip(true),\n            onPointerOut: () => toggleTooltip(false),\n            onBlur: () => toggleTooltip(false),\n            children: \"(?)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row mb-2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(ToxicityOutput, {\n              width: 100 - toxicityValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row my-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"qG0/bymQoRZ7ZPJDyyomhIGST88=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/bobby_lupo_lisa_lam_miranda_tran_shebna_mathew_finalproject/src/components/Form.js"],"names":["useState","useRef","useEffect","useDispatch","sendToChat","ToxicityOutput","toxicity","Tooltip","THRESHOLD","model","load","then","toxicityModel","Form","messageTxt","setMessageTxt","checkInProgress","setCheckInProgress","isToxic","setIsToxic","toxicityValue","setToxicityValue","tooltipOpen","toggleTooltip","tooltipRef","dispatch","tooltip","current","bsTooltip","getInstance","show","hide","processMessage","classify","predictions","problems","pred","results","match","label","probabilities","Object","keys","length","sendMessageAndClearForm","calculateToxicity","onKeyUp","event","keyCode","processInput","target","value","probablities","values","max","Math","console","log","getButtonText","getToxicityFeedback","PROBABLY_TOXIC","e","preventDefault","display"],"mappings":"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","sourcesContent":["import {useState, useRef, useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {sendToChat} from \"../redux/actions\";\nimport ToxicityOutput from \"./ToxicityOutput\";\nimport * as toxicity from '@tensorflow-models/toxicity';\nimport {Tooltip} from \"bootstrap\";\n\nconst THRESHOLD = 0.3;\n\nlet model;\ntoxicity.load(THRESHOLD).then(toxicityModel => model = toxicityModel);\n\nconst Form = () => {\n    const [messageTxt, setMessageTxt] = useState(\"\");\n    const [checkInProgress, setCheckInProgress] = useState(false);\n    const [isToxic, setIsToxic] = useState(false);\n    const [toxicityValue, setToxicityValue] = useState(0);\n    const [tooltipOpen, toggleTooltip] = useState(false);\n    const tooltipRef = useRef();\n    \n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        let tooltip = tooltipRef.current; // Get the DOM element using the ref\n        let bsTooltip = Tooltip.getInstance(tooltip); // Get an instance of Bootstrap's Tooltip plugin\n\n        if (!bsTooltip) {\n            // Initializes the tooltip when the page first loads\n            bsTooltip = new Tooltip(tooltip);\n        }\n        else {\n            // Shows or hides the tooltip as appropriate\n            tooltipOpen ? bsTooltip.show() : bsTooltip.hide();\n        }\n    })\n\n    const processMessage = () => {\n        if (!isToxic) {\n            setCheckInProgress(true);\n            model.classify(messageTxt).then(predictions => {\n                let problems = {};\n                for (let pred of predictions) {\n                    if (pred.results[0].match) {\n                        problems[pred.label] = pred.results[0].probabilities[1]; // Gets the true probability\n                    }\n                }\n                if (Object.keys(problems).length === 0) // Not toxic\n                    sendMessageAndClearForm();\n                else {\n                    setCheckInProgress(false);\n                    setIsToxic(true);\n                    setToxicityValue(calculateToxicity(problems));\n                }\n            });\n        } else sendMessageAndClearForm();\n    }\n\n    const onKeyUp = event => {\n        if (event.keyCode === 13)\n            processMessage();\n    }\n\n    const sendMessageAndClearForm = () => {\n        dispatch(sendToChat(messageTxt));\n        setMessageTxt(\"\");\n        setIsToxic(false);\n        setCheckInProgress(false);\n    }\n\n    const processInput = event => {\n        setMessageTxt(event.target.value);\n        if (isToxic) {\n            setIsToxic(false);\n        }\n    }\n\n    const calculateToxicity = problems => {\n        //  Get the highest toxicity value\n        const probablities = Object.values(problems);\n        const max =  Math.max(...probablities);\n        console.log(max  * 100);\n        return max * 100;\n    }\n\n    const getButtonText = () => {\n        if (checkInProgress) {\n            return <>Checking <span>.</span><span>.</span><span>.</span></>\n        } else {\n            if (isToxic)\n                return \"Send anyway\";\n            else return  \"Check and send\";\n        }\n    }\n\n    const getToxicityFeedback = () => {\n        // Some arbitrary thresholds... \n        const PROBABLY_TOXIC = 0.7 \n        if (toxicityValue < PROBABLY_TOXIC)\n            return <>Your message <em>might</em> be toxic but I'm not sure...</>\n        else return <>Your message is probably toxic!</>\n    }\n\n\n    return (\n        <form onSubmit={e => e.preventDefault()}>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <input aria-label=\"Your message\" type=\"text\" className=\"form-control\" id=\"messageTxt\"\n                        placeholder=\"Enter your message\" value={messageTxt}\n                        invalid={`${isToxic}`} disabled={checkInProgress}\n                        onChange={processInput}\n                        onKeyUp={onKeyUp}\n                         />\n                </div>\n                <div className=\"col-auto\">\n                    <button type=\"button\" className=\"btn btn-primary float-right\"\n                            onClick={processMessage}\n                            disabled={checkInProgress}\n                            >\n                        {getButtonText()}\n                    </button>\n                </div>\n                <div className=\"invalid-feedback\" style={isToxic === true ? {display:\"block\"} : {display: \"none\"}}>\n                    {getToxicityFeedback()}\n                    <>&nbsp;<button className=\"btn btn-link\" id=\"toxicity-help\"\n                        ref={tooltipRef}\n                        data-bs-toggle=\"tooltip\"\n                        data-bs-placement=\"top\"\n                        data-bs-trigger=\"manual\"\n                        title=\"A message is considered to be toxic if it is hateful, \n                            explicit, or otherwise offensive.  We calculate the \n                            probability that your message is toxic by comparing \n                            it to millions of internet comments that have been \n                            labeled as either toxic or healthy. The darker and wider the bar below, the higher the \n                            probability that your message is toxic.\"\n                        onPointerEnter={() => toggleTooltip(true)}\n                        onFocus={() => toggleTooltip(true)}\n                        onPointerOut={() => toggleTooltip(false)}\n                        onBlur={() => toggleTooltip(false)}\n                    >(?)</button></>\n                    <div className=\"row mb-2\">\n                        <div className=\"col\">\n                            <ToxicityOutput width={100 - toxicityValue}/>\n                        </div>\n                    </div>\n                </div>\n                \n            </div>\n            <div className=\"row my-2\">\n                \n            </div>\n        </form>\n    )\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}