{"ast":null,"code":"import { COMPLETE_ONBOARDING, STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, LOGOUT, NEW_MESSAGE, CONNECTED } from \"./actionConstants\";\nimport firebase from \"../data/fbConfig\";\nimport store from \"./store\";\nimport { joinChat, sendMessage } from \"../client\";\nconst database = firebase.firestore();\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    user\n  }\n});\nexport const loginFail = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginNetworkError = () => ({\n  type: LOGIN_NETWORK_ERROR\n});\nexport const logout = () => ({\n  type: LOGOUT\n});\nexport const userCompletedOnboarding = userId => {\n  return true; // A real operation would have a return...\n};\nexport const completeOnboarding = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  userCompletedOnboarding(userId);\n  return {\n    type: COMPLETE_ONBOARDING\n  };\n};\nexport const storePosts = posts => ({\n  type: STORE_POSTS,\n  payload: {\n    posts: posts\n  }\n});\nexport const getPosts = () => {\n  return dispatch => {\n    database.collection(\"posts\").get().then(querySnapshot => {\n      if (querySnapshot.size > 0) {\n        const posts = {};\n        querySnapshot.forEach(doc => {\n          posts[doc.id] = {\n            caption: doc.data().caption,\n            datePosted: doc.data().datePosted,\n            pictureUrl: doc.data().pictureUrl,\n            reacts: doc.data().reacts,\n            replies: doc.data().replies,\n            tags: doc.data().tags,\n            userId: doc.data().userId,\n            username: doc.data().username\n          };\n        });\n        dispatch(storePosts(posts));\n      } else {\n        console.log(\"No posts available\");\n      }\n    }).catch(error => {\n      console.log(\"Error\");\n    });\n  };\n};\nexport const connectToChat = username => {\n  console.log(\"here\");\n  return dispatch => joinChat(username);\n}; // Replaces the direct call to sendMessage in Form\n\nexport const sendToChat = msg => {\n  return dispatch => sendMessage(msg);\n};\nexport const isConnected = () => ({\n  type: CONNECTED\n});\nexport const newMessage = messages => ({\n  type: NEW_MESSAGE,\n  payload: {\n    messages\n  }\n});","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/bobby_lupo_lisa_lam_miranda_tran_shebna_mathew_finalproject/src/redux/actions.js"],"names":["COMPLETE_ONBOARDING","STORE_POSTS","LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","LOGOUT","NEW_MESSAGE","CONNECTED","firebase","store","joinChat","sendMessage","database","firestore","loginSuccess","user","type","payload","loginFail","loginNetworkError","logout","userCompletedOnboarding","userId","completeOnboarding","getState","id","storePosts","posts","getPosts","dispatch","collection","get","then","querySnapshot","size","forEach","doc","caption","data","datePosted","pictureUrl","reacts","replies","tags","username","console","log","catch","error","connectToChat","sendToChat","msg","isConnected","newMessage","messages"],"mappings":"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","sourcesContent":["import { COMPLETE_ONBOARDING, STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, LOGOUT, NEW_MESSAGE, CONNECTED } from \"./actionConstants\";\nimport firebase from \"../data/fbConfig\";\nimport store from \"./store\";\nimport { joinChat, sendMessage } from \"../client\";\n\nconst database = firebase.firestore();\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n\nexport const userCompletedOnboarding = userId => {\n   \n    return true; // A real operation would have a return...\n}\n\nexport const completeOnboarding = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    userCompletedOnboarding(userId);\n    return {\n        type: COMPLETE_ONBOARDING\n    }\n}\n\nexport const storePosts = (posts) => ({\n    type: STORE_POSTS,\n    payload: {\n        posts: posts\n    }\n\n})\n\nexport const getPosts = () => {\n    return dispatch => {\n      \n      database.collection(\"posts\")\n        .get()\n        .then((querySnapshot) => {\n          if (querySnapshot.size > 0) {\n            const posts = {};\n            querySnapshot.forEach(doc => {\n              posts[doc.id] = {\n                caption:doc.data().caption,\n                datePosted:doc.data().datePosted,\n                pictureUrl:doc.data().pictureUrl,\n                reacts:doc.data().reacts,\n                replies:doc.data().replies,\n                tags:doc.data().tags,\n                userId:doc.data().userId,\n                username:doc.data().username\n              }\n            })\n            dispatch(storePosts(posts));\n          }\n          else {\n            console.log(\"No posts available\") \n          }\n        })\n        .catch(error => {\n          console.log(\"Error\")\n        });\n    }\n  };\n  \nexport const connectToChat = username => {\n    console.log(\"here\");\n    return dispatch => joinChat(username);\n    \n}\n\n// Replaces the direct call to sendMessage in Form\nexport const sendToChat = msg =>  {\n    return dispatch => sendMessage(msg);\n}\n\nexport const isConnected = () => ({type: CONNECTED})\n\nexport const newMessage = messages => ({\n    type: NEW_MESSAGE,\n    payload: {\n        messages\n    }\n})"]},"metadata":{},"sourceType":"module"}