{"ast":null,"code":"import { COMPLETE_ONBOARDING, STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, LOGOUT, UPDATE_DOWNLOAD_URL, NEW_MESSAGE, CONNECTED, STORE_USERS, ADD_REPLY, UPDATE_REACTS, ADD_POST_PAGE, VIEW_POST, STORE_ONLINE_USERS, CREATE_SUCCESS, TOGGLE_PROFILE_VIEW, DISPLAY_SETTINGS } from \"./actionConstants\";\nimport firebase from \"../data/fbConfig\";\nimport { joinChat, sendMessage } from \"../client\";\nconst database = firebase.firestore();\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    user: user,\n    completeOnboarding: user.isNewUser\n  }\n});\nexport const createdUser = () => ({\n  type: CREATE_SUCCESS,\n  payload: {\n    createdNewUser: true\n  }\n});\nexport const toggleView = (view, user) => ({\n  type: TOGGLE_PROFILE_VIEW,\n  payload: {\n    profileView: view,\n    userView: user\n  }\n});\nexport const settingsView = view => ({\n  type: DISPLAY_SETTINGS,\n  payload: {\n    settingsView: view\n  }\n});\nexport const loginFail = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginNetworkError = () => ({\n  type: LOGIN_NETWORK_ERROR\n});\nexport const logout = () => ({\n  type: LOGOUT\n});\nexport const addPostPage = () => ({\n  type: ADD_POST_PAGE\n});\nexport const viewPost = () => ({\n  type: VIEW_POST\n});\nexport const storePosts = posts => ({\n  type: STORE_POSTS,\n  payload: {\n    posts: posts\n  }\n});\nexport const getPosts = () => {\n  return dispatch => {\n    database.collection(\"posts\").get().then(querySnapshot => {\n      if (querySnapshot.size > 0) {\n        const posts = {};\n        querySnapshot.forEach(doc => {\n          posts[doc.id] = {\n            caption: doc.data().caption,\n            datePosted: doc.data().datePosted,\n            pictureUrl: doc.data().pictureUrl,\n            reacts: doc.data().reacts,\n            replies: doc.data().replies,\n            tags: doc.data().tags,\n            userId: doc.data().userId,\n            username: doc.data().username\n          };\n        });\n        dispatch(storePosts(posts));\n      } else {\n        console.log(\"No posts available\");\n      }\n    }).catch(error => {\n      console.log(\"Error\");\n    });\n  };\n};\nexport const storeUsers = users => {\n  return {\n    type: STORE_USERS,\n    payload: {\n      users: users\n    }\n  };\n};\nexport const storeUsersOnline = users => {\n  return {\n    type: STORE_ONLINE_USERS,\n    payload: {\n      onlineUsers: users\n    }\n  };\n};\n\nconst updateReply = (postId, reply) => ({\n  type: ADD_REPLY,\n  payload: {\n    postId: postId,\n    reply: reply\n  }\n});\n\nconst updateReacts = (postId, reacts) => ({\n  type: UPDATE_REACTS,\n  payload: {\n    postId: postId,\n    reacts: reacts\n  }\n});\n\nconst updateDownloadUrl = url => ({\n  type: UPDATE_DOWNLOAD_URL,\n  payload: {\n    url: url\n  }\n});\n\nconst updateProfilePicUrl = url => ({\n  type: UPDATE_PROFILE_PIC,\n  payload: {\n    profilePicture: url\n  }\n});\n\nexport const getUsers = () => {\n  return dispatch => {\n    database.collection(\"users\").get().then(querySnapshot => {\n      if (querySnapshot.size > 0) {\n        const userDatabase = {};\n        querySnapshot.forEach(doc => {\n          userDatabase[doc.id] = {\n            username: doc.data().username,\n            password: doc.data().password,\n            isNewUser: doc.data().isNewUser,\n            isPublic: doc.data().isPublic,\n            profilePicture: doc.data().profilePicture,\n            friendsList: doc.data().friendsList,\n            userId: doc.id\n          };\n        });\n        dispatch(storeUsers(userDatabase));\n      } else {\n        console.log(\"No users available\");\n      }\n    }).catch(error => {\n      console.log(\"Error in loading users\");\n    });\n  };\n};\nexport const createUser = (username, password) => {\n  return dispatch => {\n    database.collection(\"users\").add({\n      username: username,\n      password: password,\n      isNewUser: true,\n      isPublic: true,\n      profilePicture: \"\",\n      friendsList: []\n    }).then(querySnapshot => {\n      dispatch(createdUser());\n      dispatch(getUsers());\n    }).catch(error => {\n      console.log(\"Error creating user\");\n    });\n  };\n};\n\nconst updateOnboarding = complete => ({\n  type: COMPLETE_ONBOARDING,\n  payload: {\n    user: {\n      isNewUser: complete\n    }\n  }\n});\n\nexport const completeOnboarding = (complete, userId) => {\n  return dispatch => {\n    database.collection(\"users\").doc(userId).update({\n      isNewUser: complete\n    }).then(() => {\n      dispatch(updateOnboarding(complete));\n    }).catch(error => {\n      console.log(\"Could not update user onboarding status:\", error);\n    });\n  };\n};\nexport const addReply = (reply, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId).update({\n      replies: firebase.firestore.FieldValue.arrayUnion(reply)\n    }).then(() => {\n      dispatch(updateReply(postId, reply));\n    }).catch(error => {\n      console.log(\"Could not add the reply.\", error);\n    });\n  };\n};\nexport const addReacts = (reacts, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId).update({\n      reacts: reacts\n    }).then(() => {\n      dispatch(updateReacts(postId, reacts));\n    }).catch(error => {\n      console.log(\"Could not add the reply.\", error);\n    });\n  };\n};\nexport const uploadPic = (pictureUrl, setPicUrl) => {\n  console.log(\"upload pic action HERE\");\n  var storage = firebase.storage();\n  var storageRef = storage.ref();\n  var imagesRef = storageRef.child('images');\n  var postImagesRef = imagesRef.child(pictureUrl.name);\n  let postUrl = \"\";\n  postImagesRef.put(pictureUrl).then(() => postImagesRef.getDownloadURL()).then(url => {\n    setPicUrl(url);\n    postUrl = url;\n  });\n  return dispatch => {\n    //let url = download(postImagesRef)\n    console.log('download over url: ', postUrl);\n    dispatch(updateDownloadUrl(postUrl));\n  };\n};\nlet d = new Date();\nexport const addPost = (caption, pictureUrl, tags, username) => {\n  return dispatch => {\n    console.log(\"pic url: \", pictureUrl);\n    database.collection(\"posts\").add({\n      caption: caption,\n      datePosted: `${d.getFullYear()}/${d.getMonth() + 1}/${d.getDate()}`,\n      pictureUrl: pictureUrl,\n      tags: tags,\n      username: username,\n      reacts: {\n        heart: 0,\n        laugh: 0,\n        cry: 0,\n        angry: 0\n      },\n      replies: []\n    }).then(() => {\n      console.log(\"Added new post\");\n    }).catch(error => {\n      console.log(\"Could not add the new post: \", error);\n    });\n  };\n};\nexport const connectToChat = username => {\n  console.log(\"here\");\n  return dispatch => joinChat(username);\n}; // Replaces the direct call to sendMessage in Form\n\nexport const sendToChat = msg => {\n  return dispatch => sendMessage(msg);\n};\nexport const isConnected = () => ({\n  type: CONNECTED\n});\nexport const newMessage = messages => ({\n  type: NEW_MESSAGE,\n  payload: {\n    messages\n  }\n});","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/neuGram-webApp/src/redux/actions.js"],"names":["COMPLETE_ONBOARDING","STORE_POSTS","LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","LOGOUT","UPDATE_DOWNLOAD_URL","NEW_MESSAGE","CONNECTED","STORE_USERS","ADD_REPLY","UPDATE_REACTS","ADD_POST_PAGE","VIEW_POST","STORE_ONLINE_USERS","CREATE_SUCCESS","TOGGLE_PROFILE_VIEW","DISPLAY_SETTINGS","firebase","joinChat","sendMessage","database","firestore","loginSuccess","user","type","payload","completeOnboarding","isNewUser","createdUser","createdNewUser","toggleView","view","profileView","userView","settingsView","loginFail","loginNetworkError","logout","addPostPage","viewPost","storePosts","posts","getPosts","dispatch","collection","get","then","querySnapshot","size","forEach","doc","id","caption","data","datePosted","pictureUrl","reacts","replies","tags","userId","username","console","log","catch","error","storeUsers","users","storeUsersOnline","onlineUsers","updateReply","postId","reply","updateReacts","updateDownloadUrl","url","updateProfilePicUrl","UPDATE_PROFILE_PIC","profilePicture","getUsers","userDatabase","password","isPublic","friendsList","createUser","add","updateOnboarding","complete","update","addReply","FieldValue","arrayUnion","addReacts","uploadPic","setPicUrl","storage","storageRef","ref","imagesRef","child","postImagesRef","name","postUrl","put","getDownloadURL","d","Date","addPost","getFullYear","getMonth","getDate","heart","laugh","cry","angry","connectToChat","sendToChat","msg","isConnected","newMessage","messages"],"mappings":"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","sourcesContent":["import { COMPLETE_ONBOARDING, STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, \n  LOGIN_NETWORK_ERROR, LOGOUT, UPDATE_DOWNLOAD_URL, NEW_MESSAGE, CONNECTED, STORE_USERS, ADD_REPLY, \n  UPDATE_REACTS, ADD_POST_PAGE, VIEW_POST, STORE_ONLINE_USERS, CREATE_SUCCESS, TOGGLE_PROFILE_VIEW , DISPLAY_SETTINGS} from \"./actionConstants\";\n\nimport firebase from \"../data/fbConfig\";\n\nimport { joinChat, sendMessage } from \"../client\";\n\nconst database = firebase.firestore();\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user: user,\n        completeOnboarding: user.isNewUser\n    }\n});\n\nexport const createdUser = () => ({\n  type: CREATE_SUCCESS,\n  payload: {\n      createdNewUser: true\n  }\n});\n\nexport const toggleView = (view, user) => ({\n  type: TOGGLE_PROFILE_VIEW,\n  payload: {\n      profileView: view,\n      userView: user\n  }\n});\n\nexport const settingsView = (view) => ({\n  type: DISPLAY_SETTINGS,\n  payload: {\n      settingsView: view\n  }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n\nexport const addPostPage = () => ({\n  type: ADD_POST_PAGE\n})\n\nexport const viewPost = () => ({\n  type: VIEW_POST\n})\n\nexport const storePosts = (posts) => ({\n    type: STORE_POSTS,\n    payload: {\n        posts: posts\n    }\n})\n\nexport const getPosts = () => {\n    return dispatch => {\n      \n      database.collection(\"posts\")\n        .get()\n        .then((querySnapshot) => {\n          if (querySnapshot.size > 0) {\n            const posts = {};\n            querySnapshot.forEach(doc => {\n              posts[doc.id] = {\n                caption:doc.data().caption,\n                datePosted:doc.data().datePosted,\n                pictureUrl:doc.data().pictureUrl,\n                reacts:doc.data().reacts,\n                replies:doc.data().replies,\n                tags:doc.data().tags,\n                userId:doc.data().userId,\n                username:doc.data().username\n              }\n            })\n            dispatch(storePosts(posts));\n          }\n          else {\n            console.log(\"No posts available\") \n          }\n        })\n        .catch(error => {\n          console.log(\"Error\")\n        });\n    }\n  };\n\nexport const storeUsers = (users) => {\n  return {\n    type: STORE_USERS,\n    payload: {\n        users: users\n    }\n  }\n};\n\nexport const storeUsersOnline = (users) => {\n  return {\n    type: STORE_ONLINE_USERS,\n    payload: {\n        onlineUsers: users\n    }\n  }\n}\n\nconst updateReply = (postId, reply) => ({\n  type: ADD_REPLY,\n  payload: {\n      postId: postId,\n      reply: reply\n  }\n})\n\nconst updateReacts = (postId, reacts) => ({\n  type: UPDATE_REACTS,\n  payload: {\n      postId: postId,\n      reacts: reacts\n  }\n})\n\nconst updateDownloadUrl = (url) => ({\n  type: UPDATE_DOWNLOAD_URL,\n  payload: {\n    url: url\n  }\n})\n\nconst updateProfilePicUrl = (url) => ({\n  type: UPDATE_PROFILE_PIC,\n  payload: {\n    profilePicture: url\n  }\n})\n\nexport const getUsers = () => {\n  return dispatch => {\n    \n    database.collection(\"users\")\n      .get()\n      .then((querySnapshot) => {\n        if (querySnapshot.size > 0) {\n          const userDatabase = {};\n          querySnapshot.forEach(doc => {\n            userDatabase[doc.id] = {\n              username:doc.data().username,\n              password:doc.data().password,\n              isNewUser:doc.data().isNewUser,\n              isPublic:doc.data().isPublic,\n              profilePicture:doc.data().profilePicture,\n              friendsList:doc.data().friendsList,\n              userId: doc.id\n            }\n          })\n          dispatch(storeUsers(userDatabase));\n        }\n        else {\n          console.log(\"No users available\") \n        }\n      })\n      .catch(error => {\n        console.log(\"Error in loading users\")\n      });\n      \n}};\n\nexport const createUser = (username, password) => {\n  return dispatch => {\n    \n    database.collection(\"users\")\n    .add({\n              username:username,\n              password:password,\n              isNewUser:true,\n              isPublic:true,\n              profilePicture:\"\",\n              friendsList:[]\n    })\n      .then((querySnapshot) => {\n        dispatch(createdUser());\n        dispatch(getUsers());\n\n      })\n      .catch(error => {\n        console.log(\"Error creating user\")\n      });\n      \n}};\n\nconst updateOnboarding = (complete) => ({\n  type: COMPLETE_ONBOARDING,\n  payload: {\n    user: {\n      isNewUser: complete\n    }\n  }\n})\n\nexport const completeOnboarding = (complete, userId) => {\n  return dispatch => {\n    database.collection(\"users\").doc(userId)\n      .update({\n        isNewUser: complete\n      })\n      .then(() => {\n        dispatch(updateOnboarding(complete));\n      })\n      .catch(error => {\n        console.log(\"Could not update user onboarding status:\", error);\n      })\n  }\n}\n\nexport const addReply = (reply, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId)\n      .update({\n        replies: firebase.firestore.FieldValue.arrayUnion(reply)\n      })\n      .then(() => {\n          dispatch(updateReply(postId, reply));\n      })\n      .catch(error => {\n        console.log(\"Could not add the reply.\",error);\n      })\n  }\n}\n\nexport const addReacts = (reacts, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId)\n      .update({\n        reacts: reacts\n      })\n      .then(() => {\n          dispatch(updateReacts(postId, reacts));\n      })\n      .catch(error => {\n        console.log(\"Could not add the reply.\",error);\n      })\n  }\n}\n\nexport const uploadPic = (pictureUrl, setPicUrl) => {\n\n  console.log(\"upload pic action HERE\")\n  var storage = firebase.storage();\n  var storageRef = storage.ref();\n  var imagesRef = storageRef.child('images');\n  var postImagesRef = imagesRef.child(pictureUrl.name);\n  let postUrl = \"\"\n  postImagesRef.put(pictureUrl)\n  .then(() => postImagesRef.getDownloadURL())\n  .then((url) => {\n    setPicUrl(url)\n    postUrl = url\n  })\n  \n\n  return dispatch => {\n\n    //let url = download(postImagesRef)\n    console.log('download over url: ', postUrl)\n        dispatch(updateDownloadUrl(postUrl));\n    \n  }\n\n  \n}\n\n\n\nlet d = new Date();\nexport const addPost = (caption, pictureUrl, tags, username) => {\n  \n\n  return dispatch => {\n    console.log(\"pic url: \", pictureUrl)\n    database.collection(\"posts\")\n      .add({\n        caption: caption,\n        datePosted: `${d.getFullYear()}/${d.getMonth()+1}/${d.getDate()}`,\n        pictureUrl: pictureUrl,\n        tags: tags,\n        username: username,\n        reacts: {heart:0, laugh:0, cry:0, angry:0},\n        replies: [],\n      })\n      .then(() => {\n          console.log(\"Added new post\")\n      })\n      .catch(error => {\n        console.log(\"Could not add the new post: \", error);\n\n      })\n  }\n}\n\nexport const connectToChat = username => {\n    console.log(\"here\");\n    return dispatch => joinChat(username);\n    \n}\n\n// Replaces the direct call to sendMessage in Form\nexport const sendToChat = msg =>  {\n    return dispatch => sendMessage(msg);\n}\n\nexport const isConnected = () => ({type: CONNECTED})\n\nexport const newMessage = messages => ({\n    type: NEW_MESSAGE,\n    payload: {\n        messages\n    }\n})"]},"metadata":{},"sourceType":"module"}