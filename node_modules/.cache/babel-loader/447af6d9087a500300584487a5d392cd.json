{"ast":null,"code":"import { COMPLETE_ONBOARDING, STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, LOGOUT, NEW_MESSAGE, CONNECTED, STORE_USERS, ADD_REPLY, UPDATE_REACTS, ADD_POST, ADD_POST_PAGE, VIEW_POST, STORE_ONLINE_USERS } from \"./actionConstants\";\nimport firebase from \"../data/fbConfig\";\nimport store from \"./store\";\nimport { joinChat, sendMessage } from \"../client\";\nconst database = firebase.firestore();\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    user: user\n  }\n});\nexport const loginFail = () => ({\n  type: INVALID_LOGIN\n});\nexport const loginNetworkError = () => ({\n  type: LOGIN_NETWORK_ERROR\n});\nexport const logout = () => ({\n  type: LOGOUT\n});\nexport const userCompletedOnboarding = userId => {\n  return true; // A real operation would have a return...\n};\nexport const completeOnboarding = () => {\n  // Gets the current user from the store. Note the store import above.\n  const userId = store.getState().user.id;\n  userCompletedOnboarding(userId);\n  return {\n    type: COMPLETE_ONBOARDING\n  };\n};\nexport const addPostPage = () => ({\n  type: ADD_POST_PAGE\n});\nexport const viewPost = () => ({\n  type: VIEW_POST\n});\nexport const storePosts = posts => ({\n  type: STORE_POSTS,\n  payload: {\n    posts: posts\n  }\n});\nexport const getPosts = () => {\n  return dispatch => {\n    database.collection(\"posts\").get().then(querySnapshot => {\n      if (querySnapshot.size > 0) {\n        const posts = {};\n        querySnapshot.forEach(doc => {\n          posts[doc.id] = {\n            caption: doc.data().caption,\n            datePosted: doc.data().datePosted,\n            pictureUrl: doc.data().pictureUrl,\n            reacts: doc.data().reacts,\n            replies: doc.data().replies,\n            tags: doc.data().tags,\n            userId: doc.data().userId,\n            username: doc.data().username\n          };\n        });\n        dispatch(storePosts(posts));\n      } else {\n        console.log(\"No posts available\");\n      }\n    }).catch(error => {\n      console.log(\"Error\");\n    });\n  };\n};\nexport const storeUsers = users => ({\n  type: STORE_USERS,\n  payload: {\n    users: users\n  }\n});\nexport const storeUsersOnline = users => {\n  return {\n    type: STORE_ONLINE_USERS,\n    payload: {\n      onlineUsers: users\n    }\n  };\n};\n\nconst updateReply = (postId, reply) => ({\n  type: ADD_REPLY,\n  payload: {\n    postId: postId,\n    reply: reply\n  }\n});\n\nconst updateReacts = (postId, reacts) => ({\n  type: UPDATE_REACTS,\n  payload: {\n    postId: postId,\n    reacts: reacts\n  }\n});\n\nexport const getUsers = () => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"users\").get().then(querySnapshot => {\n      if (querySnapshot.size > 0) {\n        const userDatabase = {};\n        querySnapshot.forEach(doc => {\n          userDatabase[doc.id] = {\n            username: doc.data().username,\n            password: doc.data().password,\n            isNewUser: doc.data().isNewUser,\n            isPublic: doc.data().isPublic,\n            profilePicture: doc.data().profilePicture,\n            friendsList: doc.data().friendsList\n          };\n        });\n        dispatch(storeUsers(userDatabase));\n      } else {\n        console.log(\"No users available\");\n      }\n    }).catch(error => {\n      console.log(\"Error in loading users\");\n    });\n  };\n};\nexport const addReply = (reply, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId).update({\n      replies: firebase.firestore.FieldValue.arrayUnion(reply)\n    }).then(() => {\n      dispatch(updateReply(postId, reply));\n    }).catch(error => {\n      console.log(\"Could not add the reply.\", error);\n    });\n  };\n};\nexport const addReacts = (reacts, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId).update({\n      reacts: reacts\n    }).then(() => {\n      dispatch(updateReacts(postId, reacts));\n    }).catch(error => {\n      console.log(\"Could not add the reply.\", error);\n    });\n  };\n};\nlet d = new Date();\nexport const addPost = (caption, pictureUrl, tags, username) => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"posts\").add({\n      caption: caption,\n      datePosted: d.toLocaleDateString() + \" at \" + d.toLocaleTimeString(),\n      pictureUrl: pictureUrl,\n      tags: tags,\n      username: username,\n      reacts: {},\n      replies: []\n    }).then(() => {\n      console.log(\"Added new post\");\n    }).catch(error => {\n      console.log(\"Could not add the new post\");\n    });\n  };\n};\nexport const connectToChat = username => {\n  console.log(\"here\");\n  return dispatch => joinChat(username);\n}; // Replaces the direct call to sendMessage in Form\n\nexport const sendToChat = msg => {\n  return dispatch => sendMessage(msg);\n};\nexport const isConnected = () => ({\n  type: CONNECTED\n});\nexport const newMessage = messages => ({\n  type: NEW_MESSAGE,\n  payload: {\n    messages\n  }\n});","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/bobby_lupo_lisa_lam_miranda_tran_shebna_mathew_finalproject/src/redux/actions.js"],"names":["COMPLETE_ONBOARDING","STORE_POSTS","LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","LOGOUT","NEW_MESSAGE","CONNECTED","STORE_USERS","ADD_REPLY","UPDATE_REACTS","ADD_POST","ADD_POST_PAGE","VIEW_POST","STORE_ONLINE_USERS","firebase","store","joinChat","sendMessage","database","firestore","loginSuccess","user","type","payload","loginFail","loginNetworkError","logout","userCompletedOnboarding","userId","completeOnboarding","getState","id","addPostPage","viewPost","storePosts","posts","getPosts","dispatch","collection","get","then","querySnapshot","size","forEach","doc","caption","data","datePosted","pictureUrl","reacts","replies","tags","username","console","log","catch","error","storeUsers","users","storeUsersOnline","onlineUsers","updateReply","postId","reply","updateReacts","getUsers","userDatabase","password","isNewUser","isPublic","profilePicture","friendsList","addReply","update","FieldValue","arrayUnion","addReacts","d","Date","addPost","add","toLocaleDateString","toLocaleTimeString","connectToChat","sendToChat","msg","isConnected","newMessage","messages"],"mappings":"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","sourcesContent":["import { COMPLETE_ONBOARDING, STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, \n\n  LOGIN_NETWORK_ERROR, LOGOUT, NEW_MESSAGE, CONNECTED, STORE_USERS, ADD_REPLY, UPDATE_REACTS,ADD_POST, ADD_POST_PAGE, VIEW_POST, STORE_ONLINE_USERS } from \"./actionConstants\";\n\nimport firebase from \"../data/fbConfig\";\nimport store from \"./store\";\nimport { joinChat, sendMessage } from \"../client\";\n\nconst database = firebase.firestore();\n\nexport const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: {\n        user: user\n    }\n});\n\nexport const loginFail = () => ({\n    type: INVALID_LOGIN\n});\n\nexport const loginNetworkError = () => ({\n    type: LOGIN_NETWORK_ERROR\n});\n\nexport const logout = () => ({\n    type: LOGOUT\n});\n\nexport const userCompletedOnboarding = userId => {\n   \n    return true; // A real operation would have a return...\n}\n\nexport const completeOnboarding = () => {\n    // Gets the current user from the store. Note the store import above.\n    const userId = store.getState().user.id;\n    userCompletedOnboarding(userId);\n    return {\n        type: COMPLETE_ONBOARDING\n    }\n}\n\nexport const addPostPage = () => ({\n  type: ADD_POST_PAGE\n})\n\nexport const viewPost = () => ({\n  type: VIEW_POST\n})\n\nexport const storePosts = (posts) => ({\n    type: STORE_POSTS,\n    payload: {\n        posts: posts\n    }\n})\n\nexport const getPosts = () => {\n    return dispatch => {\n      \n      database.collection(\"posts\")\n        .get()\n        .then((querySnapshot) => {\n          if (querySnapshot.size > 0) {\n            const posts = {};\n            querySnapshot.forEach(doc => {\n              posts[doc.id] = {\n                caption:doc.data().caption,\n                datePosted:doc.data().datePosted,\n                pictureUrl:doc.data().pictureUrl,\n                reacts:doc.data().reacts,\n                replies:doc.data().replies,\n                tags:doc.data().tags,\n                userId:doc.data().userId,\n                username:doc.data().username\n              }\n            })\n            dispatch(storePosts(posts));\n          }\n          else {\n            console.log(\"No posts available\") \n          }\n        })\n        .catch(error => {\n          console.log(\"Error\")\n        });\n    }\n  };\n\nexport const storeUsers = (users) => ({\n  type: STORE_USERS,\n  payload: {\n      users: users\n  }\n});\n\nexport const storeUsersOnline = (users) => {\n  return {\n    type: STORE_ONLINE_USERS,\n    payload: {\n        onlineUsers: users\n    }\n  }\n}\n\nconst updateReply = (postId, reply) => ({\n  type: ADD_REPLY,\n  payload: {\n      postId: postId,\n      reply: reply\n  }\n})\n\nconst updateReacts = (postId, reacts) => ({\n  type: UPDATE_REACTS,\n  payload: {\n      postId: postId,\n      reacts: reacts\n  }\n})\n\nexport const getUsers = () => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"users\")\n      .get()\n      .then((querySnapshot) => {\n        if (querySnapshot.size > 0) {\n          const userDatabase = {};\n          querySnapshot.forEach(doc => {\n            userDatabase[doc.id] = {\n              username:doc.data().username,\n              password:doc.data().password,\n              isNewUser:doc.data().isNewUser,\n              isPublic:doc.data().isPublic,\n              profilePicture:doc.data().profilePicture,\n              friendsList:doc.data().friendsList\n            }\n          })\n          dispatch(storeUsers(userDatabase));\n        }\n        else {\n          console.log(\"No users available\") \n        }\n      })\n      .catch(error => {\n        console.log(\"Error in loading users\")\n      });\n      \n}};\n\n\nexport const addReply = (reply, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId)\n      .update({\n        replies: firebase.firestore.FieldValue.arrayUnion(reply)\n      })\n      .then(() => {\n          dispatch(updateReply(postId, reply));\n      })\n      .catch(error => {\n        console.log(\"Could not add the reply.\",error);\n      })\n  }\n}\n\nexport const addReacts = (reacts, postId) => {\n  return dispatch => {\n    database.collection(\"posts\").doc(postId)\n      .update({\n        reacts: reacts\n      })\n      .then(() => {\n          dispatch(updateReacts(postId, reacts));\n      })\n      .catch(error => {\n        console.log(\"Could not add the reply.\",error);\n      })\n  }\n}\n\nlet d = new Date();\nexport const addPost = (caption, pictureUrl, tags, username) => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"posts\")\n      .add({\n        caption: caption,\n        datePosted: d.toLocaleDateString() + \" at \" + d.toLocaleTimeString(),\n        pictureUrl: pictureUrl,\n        tags: tags,\n        username: username,\n        reacts: {},\n        replies: [],\n      })\n      .then(() => {\n          console.log(\"Added new post\")\n      })\n      .catch(error => {\n        console.log(\"Could not add the new post\");\n\n      })\n  }\n}\n\nexport const connectToChat = username => {\n    console.log(\"here\");\n    return dispatch => joinChat(username);\n    \n}\n\n// Replaces the direct call to sendMessage in Form\nexport const sendToChat = msg =>  {\n    return dispatch => sendMessage(msg);\n}\n\nexport const isConnected = () => ({type: CONNECTED})\n\nexport const newMessage = messages => ({\n    type: NEW_MESSAGE,\n    payload: {\n        messages\n    }\n})"]},"metadata":{},"sourceType":"module"}