{"ast":null,"code":"import { INITIAL_STATE, LOGIN_STATE } from \"./stateConstants\";\nimport { STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, COMPLETE_ONBOARDING, LOGOUT, NEW_MESSAGE, CONNECTED, STORE_USERS } from \"./actionConstants\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\nfunction rootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case STORE_USERS:\n      {\n        console.log(action.payload.users);\n        return { ...state,\n          users: action.payload.users\n        };\n      }\n\n    case LOGIN_SUCCESS:\n      console.log('update login state');\n      return { ...state,\n        loginState: LOGIN_STATE.LOGGED_IN,\n        user: action.payload.user\n      };\n\n    case INVALID_LOGIN:\n      return { ...state,\n        loginState: LOGIN_STATE.INVALID_LOGIN\n      };\n\n    case LOGIN_NETWORK_ERROR:\n      return { ...state,\n        loginState: LOGIN_STATE.NETWORK_ERROR\n      };\n\n    case LOGOUT:\n      return { ...state,\n        user: {},\n        loginState: LOGIN_STATE.LOGGED_OUT\n      };\n\n    case COMPLETE_ONBOARDING:\n      return { ...state,\n        user: { ...state.user,\n          onboardingComplete: true\n        }\n      };\n\n    case STORE_POSTS:\n      return { ...state,\n        posts: action.payload.posts\n      };\n\n    case NEW_MESSAGE:\n      return { ...state,\n        messages: action.payload.messages\n      };\n\n    case CONNECTED:\n      return { ...state,\n        isConnected: true\n      };\n\n    case ADD_REPLY:\n      const currentThreads = { ...state.threads\n      };\n      const updated = currentThreads[action.payload.threadId];\n      updated.replies.push(action.payload.reply);\n      return { ...state,\n        threads: currentThreads\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/bobby_lupo_lisa_lam_miranda_tran_shebna_mathew_finalproject/src/redux/store.js"],"names":["INITIAL_STATE","LOGIN_STATE","STORE_POSTS","LOGIN_SUCCESS","INVALID_LOGIN","LOGIN_NETWORK_ERROR","COMPLETE_ONBOARDING","LOGOUT","NEW_MESSAGE","CONNECTED","STORE_USERS","createStore","applyMiddleware","thunkMiddleware","rootReducer","state","action","type","console","log","payload","users","loginState","LOGGED_IN","user","NETWORK_ERROR","LOGGED_OUT","onboardingComplete","posts","messages","isConnected","ADD_REPLY","currentThreads","threads","updated","threadId","replies","push","reply"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,WAAvB,QAAyC,kBAAzC;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,aAArC,EAAoDC,mBAApD,EAAyEC,mBAAzE,EACIC,MADJ,EACYC,WADZ,EACyBC,SADzB,EACoCC,WADpC,QACuD,mBADvD;AAEA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;;AAEA,SAASC,WAAT,CAAqBC,KAAK,GAAGf,aAA7B,EAA4CgB,MAA5C,EAAoD;AAChD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAL;AAAkB;AACdQ,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAP,CAAeC,KAA3B;AACA,eAAO,EAAC,GAAGN,KAAJ;AAAWM,UAAAA,KAAK,EAAEL,MAAM,CAACI,OAAP,CAAeC;AAAjC,SAAP;AACH;;AACD,SAAKlB,aAAL;AACIe,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,aAAO,EACH,GAAGJ,KADA;AAEHO,QAAAA,UAAU,EAAErB,WAAW,CAACsB,SAFrB;AAGHC,QAAAA,IAAI,EAAER,MAAM,CAACI,OAAP,CAAeI;AAHlB,OAAP;;AAKJ,SAAKpB,aAAL;AACI,aAAO,EAAC,GAAGW,KAAJ;AAAWO,QAAAA,UAAU,EAAErB,WAAW,CAACG;AAAnC,OAAP;;AACJ,SAAKC,mBAAL;AACI,aAAO,EAAC,GAAGU,KAAJ;AAAWO,QAAAA,UAAU,EAAErB,WAAW,CAACwB;AAAnC,OAAP;;AACJ,SAAKlB,MAAL;AACI,aAAO,EAAC,GAAGQ,KAAJ;AAAWS,QAAAA,IAAI,EAAE,EAAjB;AAAqBF,QAAAA,UAAU,EAAErB,WAAW,CAACyB;AAA7C,OAAP;;AACJ,SAAKpB,mBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHS,QAAAA,IAAI,EAAE,EACF,GAAGT,KAAK,CAACS,IADP;AAEFG,UAAAA,kBAAkB,EAAE;AAFlB;AAFH,OAAP;;AAOJ,SAAKzB,WAAL;AACI,aAAO,EAAC,GAAGa,KAAJ;AAAWa,QAAAA,KAAK,EAAEZ,MAAM,CAACI,OAAP,CAAeQ;AAAjC,OAAP;;AACJ,SAAKpB,WAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAWc,QAAAA,QAAQ,EAAEb,MAAM,CAACI,OAAP,CAAeS;AAApC,OAAP;;AACJ,SAAKpB,SAAL;AACI,aAAO,EAAC,GAAGM,KAAJ;AAAWe,QAAAA,WAAW,EAAE;AAAxB,OAAP;;AACJ,SAAKC,SAAL;AACI,YAAMC,cAAc,GAAG,EAAC,GAAGjB,KAAK,CAACkB;AAAV,OAAvB;AACA,YAAMC,OAAO,GAAGF,cAAc,CAAChB,MAAM,CAACI,OAAP,CAAee,QAAhB,CAA9B;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgBC,IAAhB,CAAqBrB,MAAM,CAACI,OAAP,CAAekB,KAApC;AACA,aAAO,EAAC,GAAGvB,KAAJ;AACHkB,QAAAA,OAAO,EAACD;AADL,OAAP;;AAGJ;AACI,aAAOjB,KAAP;AAxCR;AA0CH;;AAED,eAAeJ,WAAW,CAACG,WAAD,EAAcF,eAAe,CAACC,eAAD,CAA7B,CAA1B","sourcesContent":["import {INITIAL_STATE, LOGIN_STATE} from \"./stateConstants\";\nimport { STORE_POSTS, LOGIN_SUCCESS, INVALID_LOGIN, LOGIN_NETWORK_ERROR, COMPLETE_ONBOARDING, \n    LOGOUT, NEW_MESSAGE, CONNECTED, STORE_USERS } from \"./actionConstants\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\nfunction rootReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case STORE_USERS: {\n            console.log(action.payload.users)\n            return {...state, users: action.payload.users};\n        }\n        case LOGIN_SUCCESS:\n            console.log('update login state')\n            return {\n                ...state,\n                loginState: LOGIN_STATE.LOGGED_IN,\n                user: action.payload.user\n            }\n        case INVALID_LOGIN:\n            return {...state, loginState: LOGIN_STATE.INVALID_LOGIN}\n        case LOGIN_NETWORK_ERROR:\n            return {...state, loginState: LOGIN_STATE.NETWORK_ERROR}\n        case LOGOUT:\n            return {...state, user: {}, loginState: LOGIN_STATE.LOGGED_OUT}\n        case COMPLETE_ONBOARDING:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    onboardingComplete: true\n                }\n            }    \n        case STORE_POSTS: \n            return {...state, posts: action.payload.posts};\n        case NEW_MESSAGE:\n            return {...state, messages: action.payload.messages}\n        case CONNECTED:\n            return {...state, isConnected: true}\n        case ADD_REPLY:\n            const currentThreads = {...state.threads};\n            const updated = currentThreads[action.payload.threadId];\n            updated.replies.push(action.payload.reply);\n            return {...state,\n                threads:currentThreads\n            }\n        default:\n            return state;\n    }\n}\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));"]},"metadata":{},"sourceType":"module"}